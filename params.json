{"name":"Minimongo","tagline":"Client-side MongoDB backed by IndexedDb, WebSQL or LocalStorage with server sync over HTTP","body":"# Minimongo\r\n\r\nA client-side MongoDB implementation which supports basic queries, including some geospatial ones.\r\n\r\nUses code from Meteor.js minimongo package, reworked to support more geospatial queries and made npm+browserify friendly.\r\n\r\nIt is either IndexedDb backed (IndexedDb), WebSQL backed (WebSQLDb), Local storage backed (LocalStorageDb) or in memory only (MemoryDb).\r\n\r\nAutoselection is possible with utils.autoselectLocalDb(options, success, error)\r\n\r\n## Usage\r\n\r\nMinimongo is designed to be used with browserify.\r\n\r\n```javascript\r\n\r\n// Require minimongo\r\nvar minimongo = require(\"minimongo\");\r\n\r\nvar LocalDb = minimongo.MemoryDb;\r\n\r\n// Create local db (in memory database with no backing)\r\ndb = new LocalDb();\r\n\r\n// Add a collection to the database\r\ndb.addCollection(\"animals\");\r\n\r\ndoc = { species: \"dog\", name: \"Bingo\" };\r\n\r\n// Always use upsert for both inserts and modifies\r\ndb.animals.upsert(doc, function() {\r\n\t// Success:\r\n\r\n\t// Query dog (with no query options beyond a selector)\r\n\tdb.animals.findOne({ species:\"dog\" }, {}, function(res) {\r\n\t\tconsole.log(\"Dog's name is: \" + res.name);\r\n\t});\r\n});\r\n```\r\n\r\n### IndexedDb\r\n\r\nTo make a database backed by IndexedDb:\r\n\r\n```javascript\r\n\r\n// Require minimongo\r\nvar minimongo = require(\"minimongo\");\r\n\r\nvar IndexedDb = minimongo.IndexedDb;\r\n\r\n// Create IndexedDb\r\ndb = new IndexedDb({namespace: \"mydb\"}, function() {\r\n\t// Add a collection to the database\r\n\tdb.addCollection(\"animals\", function() {\r\n\t\tdoc = { species: \"dog\", name: \"Bingo\" };\r\n\r\n\t\t// Always use upsert for both inserts and modifies\r\n\t\tdb.animals.upsert(doc, function() {\r\n\t\t\t// Success:\r\n\r\n\t\t\t// Query dog (with no query options beyond a selector)\r\n\t\t\tdb.animals.findOne({ species:\"dog\" }, {}, function(res) {\r\n\t\t\t\tconsole.log(\"Dog's name is: \" + res.name);\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n}, function() { alert(\"some error!\"); });\r\n\r\n```\r\n\r\n### HybridDb\r\n\r\nQueries the local database first and then returns remote data if different than local version. \r\n\r\nThis approach allows fast responses but with subsequent correction if the server has differing information.\r\n\r\n\r\n### RemoteDb\r\n\r\nUses AJAX-JSON calls to an API to query a real Mongo database. API is simple and contains only query, upsert and remove commands.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}